
@Copyright by SONG

Python 基础:

注释
注释 是任何存在于 # 号右侧的文字，其主要用作写给程序读者看的笔记。

字面常量
一个字面常量（Literal Constants） 的例子是诸如 5 、 1.23 这样的数字，或者是如 这是一
串文本 或 This is a string 这样的文本。

数字
数字主要分为两种类型——整数（Integers）与浮点数（Floats）。

字符串
一串字符串（String）是 字符（Characters） 的 序列（Sequence）。基本上，字符串就是一
串词汇。字符串是不可变的

单引号 / 双引号 / 三引号(""" 或 ''')
'''这是一段多行字符串。这是它的第一行。
This is the second line.
"What's your name?," I asked.
He said "Bond, James Bond."
'''

格式化方法
format()

空白结尾
print('a', end='')

转义序列（Escape Sequence）
\\
\n

原始字符串
若需要指定一些未经过特殊处理的字符串,则在字符串前增加 r 或 R 来指定一个 原始（Raw） 字符串
print(r"Newlines are indicated by \n")

变量

标识符命名
需要遵守以下规则：
1.第一个字符必须是字母表中的字母（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）或下划线（ _ ）。
2.标识符的其它部分可以由字符（大写 ASCII 字符或小写 ASCII 字符或 Unicode 字符）、下划线（ _ ）、数字（0~9）组成。
3.标识符名称区分大小写。例如， myname 和 myName 并不等同。要注意到前者是小写字母 n 而后者是大写字母 N 。
4.有效的标识符名称可以是 i 或 name_2_3 ，无效的标识符名称可能是2things ， this is spaced out ， my-name 和 >a1b2_c3 。

数据类型 （Data Type）
变量可以将各种形式的值保存为不同的数据类型

对象
需要记住的是，Python 将程序中的任何内容统称为 对象（Object）。这是一般意义上的说法。
我们以“某某对象（object）”相称，而非“某某东西（something）”。

Python 是强（Strongly）面向对象的，因为所有的一切都是对象， 包括数字、字符串与函数。

如何编写 Python 程序
从今以后，保存和运行 Python 程序的标准步骤如下：
对于 PyCharm 用户
1. 打开 PyCharm。
2. 以给定的文件名创建新文件。
3. 输入案例中给出的代码。
4. 右键并运行当前文件。

使用变量与字面常量
var.py

逻辑行与物理行
所谓物理行（Physical Line）是你在编写程序时 你所看到 的内容。
所谓逻辑行（Logical Line）是 Python 所看到 的单个语句。Python 会假定每一 物理行 会对应一个 逻辑行。

Python 鼓励每一行使用一句独立语句从而使得代码更加可读。

强烈建议你对于每一行物理行最多只写入一行逻辑行。这个观点就是说你不应该使用分号。

显式行连接（Explicit Line Joining）
s = 'This is a string. \
This continues the string.'
print(s)

缩进 （Indentation）

如何缩进
使用四个空格来缩进。这是来自 Python 语言官方的建议
Python 将始终对块使用缩进，并且绝不会使用大括号



运算符与表达式
所编写的大多数语句（逻辑行）都包含了表达式（Expressions）。一个表达式的简单例子
便是 2+3 。表达式可以拆分成运算符（Operators）与操作数（Operands）。

运算符（Operators）是进行某些操作，并且可以用诸如 + 等符号或特殊关键词加以表达的
功能。运算符需要一些数据来进行操作，这些数据就被称作操作数（Operands）。

运算符
+ （加）
两个对象相加。
3+5 则输出 8 。 'a' + 'b' 则输出 'ab' 。

- （减）
从一个数中减去另一个数，如果第一个操作数不存在，则假定为零。
-5.2 将输出一个负数， 50 - 24 输出 26 。

* （乘）
给出两个数的乘积，或返回字符串重复指定次数后的结果。
2 * 3 输出 6 。 'la' * 3 输出 'lalala' 。

** （乘方）
返回 x 的 y 次方。
3 ** 4 输出 81 （即 3 * 3 * 3 * 3 ）。

/ （除）
x 除以 y
13 / 3 输出 4.333333333333333 。

// （整除）
x 除以 y 并对结果向下取整至最接近的整数。

13 // 3 输出 4 。
-13 // 3 输出 -5 。

% （取模）
返回除法运算后的余数。
13 % 3 输出 1 。 -25.5 % 2.25 输出 1.5 。

<< （左移）
将数字的位向左移动指定的位数。（每个数字在内存中以二进制数表示，即 0 和1）
2 << 2 输出 8 。 2 用二进制数表示为 10 。
向左移 2 位会得到 1000 这一结果，表示十进制中的 8 。

>> （右移）
将数字的位向右移动指定的位数。
11 >> 1 输出 5 。
11 在二进制中表示为 1011 ，右移一位后输出 101 这一结果，表示十进制中的 5 。

& （按位与）
对数字进行按位与操作。
5 & 3 输出 1 。

| （按位或）
对数字进行按位或操作。
5 | 3 输出 7 。

^ （按位异或）
对数字进行按位异或操作。
5 ^ 3 输出 6 。

~ （按位取反）
x 的按位取反结果为 -(x+1)。
~5 输出 -6 。

< （小于）
返回 x 是否小于 y。所有的比较运算符返回的结果均为 True 或 False 。请注意这些名称之中的大写字母。
5 < 3 输出 False ， 3 < 6 输出 True 。

比较可以任意组成组成链接： 3 < 5 < 7 返回 True 。

> （大于）
返回 x 是否大于 y。
5 > 3 返回 True 。如果两个操作数均为数字，它们首先将会被转换至一种共同的
类型。否则，它将总是返回 False 。

<= （小于等于）
返回 x 是否小于或等于 y。
x = 3; y = 6; x<=y 返回 True 。

>= （大于等于）
返回 x 是否大于或等于 y。
x = 4; y = 3; x>=3 返回 True 。

== （等于）
比较两个对象是否相等。
x = 2; y = 2; x == y 返回 True 。
x = 'str'; y = 'stR'; x == y 返回 False 。
x = 'str'; y = 'str'; x == y 返回 True 。

!= （不等于）
比较两个对象是否不相等。
x = 2; y = 3; x != y 返回 True 。

not （布尔“非”）
如果 x 是 Ture ，则返回 False 。如果 x 是 False ，则返回 True 。
x = Ture; not x 返回 False 。

and （布尔“与”）
如果 x 是 False ，则 x and y 返回 False ，否则返回 y 的计算值。
当 x 是 False 时， x = False; y = True; x and y 将返回 False 。在这一情境中，
Python 将不会计算 y，因为它已经了解 and 表达式的左侧是 False ，这意味着整个
表达式都将是 False 而不会是别的值。这种情况被称作短路计算（Short-circuit Evaluation）。

or （布尔“或”）
如果 x 是 True ，则返回 True ，否则它将返回 y 的计算值。
x = Ture; y = False; x or y 将返回 Ture 。在这里短路计算同样适用。

数值运算与赋值的快捷方式
a = 2
a *= 3



求值顺序
Python 中从最低优先级（最少绑定）到最高优先级（最多绑定）的优先级表

lambda ：Lambda 表达式
if - else ：条件表达式
or ：布尔“或”
and ：布尔“与”
not x ：布尔“非”
in, not in, is, is not, <, <=, >, >=, !=, == ：比较，包括成员资格测试（Membership Tests）和身份测试（Identity Tests）。
| ：按位或
^ ：按位异或
& ：按位与
<<, >> ：移动
+, - ：加与减
*, /, //, % ：乘、除、整除、取余
+x, -x, ~x ：正、负、按位取反
** ：求幂
x[index], x[index:index], x(arguments...), x.attribute ：下标、切片、调用、属性引用
(expressions...), [expressions...], {key: value...}, {expressions...} ：显示绑定或数组、显示列表、显示字典、显示设置

改变运算顺序 ()

表达式


